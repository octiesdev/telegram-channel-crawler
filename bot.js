// –ù–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π bot.js
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs-extra");
const { exec } = require("child_process");
const path = require("path");
const { CONFIG } = require("./config.js");
const { run } = require("./runner.js");

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const bot = new TelegramBot(CONFIG.TELEGRAM_BOT_TOKEN, { polling: true });

let pendingAuth = {}; // –î–ª—è –Ω–æ–º–µ—Ä–∞ –∏ –∫–æ–¥–∞

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
bot.use(async (msg, next) => {
  if (msg.chat && msg.chat.id.toString() !== CONFIG.ADMIN_CHAT_ID) {
    await bot.sendMessage(msg.chat.id, "‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.");
    return;
  }
  next();
});

// /start
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /upload_session, /parse <—Å—Å—ã–ª–∫–∞>, /results, /reset");
});

// /upload_session - –∑–∞–≥—Ä—É–∑–∫–∞ localStorage
bot.on("document", async (msg) => {
  if (!msg.document) return;

  const chatId = msg.chat.id;
  const fileId = msg.document.file_id;
  const fileName = msg.document.file_name || `session_${Date.now()}.json`;

  if (!fileName.endsWith(".json")) {
    return bot.sendMessage(chatId, "‚õîÔ∏è –¢–æ–ª—å–∫–æ .json —Ñ–∞–π–ª—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.");
  }

  try {
    const fileLink = await bot.getFileLink(fileId);
    const response = await fetch(fileLink);
    const sessionData = await response.text();

    JSON.parse(sessionData); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π JSON

    const savePath = path.join(CONFIG.SESSIONS_DIR, fileName);
    await fs.outputFile(savePath, sessionData);

    await bot.sendMessage(chatId, `‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${fileName}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:", err);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.");
  }
});

// /parse
bot.onText(/\/parse (.+)/, async (msg, match) => {
  const url = match[1];

  try {
    if (!(await fs.pathExists(CONFIG.SESSIONS_DIR))) {
      return bot.sendMessage(msg.chat.id, `‚ùå –ü–∞–ø–∫–∞ —Å–µ—Å—Å–∏–π ${CONFIG.SESSIONS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }

    const sessions = await fs.readdir(CONFIG.SESSIONS_DIR);
    if (!sessions.length) {
      return bot.sendMessage(msg.chat.id, `‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≤ ${CONFIG.SESSIONS_DIR}`);
    }

    await fs.ensureDir("./logs");
    await fs.appendFile("./logs/log.txt", `[${new Date().toISOString()}] START PARSE: ${url}\n`);

    await bot.sendMessage(msg.chat.id, `üîç –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: ${url}`);
    await run(url);
    await bot.sendMessage(msg.chat.id, `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /results –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞.`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", err);
    await bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${err.message}`);
  }
});

// /results
bot.onText(/\/results/, async (msg) => {
  const file = CONFIG.RESULT_FILE;
  if (await fs.pathExists(file)) {
    await bot.sendDocument(msg.chat.id, file);
  } else {
    await bot.sendMessage(msg.chat.id, "‚õîÔ∏è –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
  }
});

// /reset
bot.onText(/\/reset/, async (msg) => {
  await fs.writeJson(CONFIG.QUEUE_FILE, []);
  await fs.writeJson(CONFIG.VISITED_FILE, []);
  await fs.writeJson(CONFIG.RESULT_FILE, []);
  await bot.sendMessage(msg.chat.id, "‚ôªÔ∏è –û—á–µ—Ä–µ–¥—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã!");
});

// /add_account - –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–±—É–¥–µ–º —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—Ç—å localStorage)
bot.onText(/\/add_account/, async (msg) => {
  await bot.sendMessage(msg.chat.id, "‚öôÔ∏è –ü–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Å—Å–∏–π!");
});