// bot.js
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs-extra");
const { exec } = require("child_process");
const { CONFIG } = require("./config.js");

const bot = new TelegramBot(CONFIG.TELEGRAM_BOT_TOKEN, { polling: true });

let pendingAuth = {}; // –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–¥–∞

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
bot.on("message", (msg) => {
  if (msg.chat.id.toString() !== CONFIG.ADMIN_CHAT_ID) {
    bot.sendMessage(msg.chat.id, "‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.");
  }
});

// /start
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞–ø–∏—à–∏ /parse <—Å—Å—ã–ª–∫–∞>");
});

// /parse
bot.onText(/\/parse (.+)/, async (msg, match) => {
  const url = match[1];
  await fs.ensureDir("./logs");
  await fs.appendFile("./logs/log.txt", `[${new Date().toISOString()}] START PARSE: ${url}\n`);
  bot.sendMessage(msg.chat.id, "üõ† –ü–∞—Ä—Å–∏–Ω–≥ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞. runner.js –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.");
});

// /status
bot.onText(/\/status/, async (msg) => {
  bot.sendMessage(msg.chat.id, "üìä –°—Ç–∞—Ç—É—Å: –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å (–ª–æ–≥–∏–∫–∞ runner.js –±—É–¥–µ—Ç –ø–æ–∑–∂–µ)");
});

// /reset
bot.onText(/\/reset/, async (msg) => {
  await fs.writeJson(CONFIG.QUEUE_FILE, []);
  bot.sendMessage(msg.chat.id, "‚ôªÔ∏è –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞. visited –∏ results –Ω–µ —Ç—Ä–æ–Ω—É—Ç—ã.");
});

// /results
bot.onText(/\/results/, async (msg) => {
  const file = CONFIG.RESULT_FILE;
  if (await fs.exists(file)) {
    bot.sendDocument(msg.chat.id, file);
  } else {
    bot.sendMessage(msg.chat.id, "‚õîÔ∏è –§–∞–π–ª results.json –ø–æ–∫–∞ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
});

// /add_account
bot.onText(/\/add_account/, async (msg) => {
  bot.sendMessage(msg.chat.id, "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +123456789:");
  pendingAuth[msg.chat.id] = { step: "awaiting_number" };
});

bot.on("message", async (msg) => {
  const state = pendingAuth[msg.chat.id];
  if (!state) return;

  if (state.step === "awaiting_number") {
    state.phone = msg.text;
    state.step = "awaiting_code";
    bot.sendMessage(msg.chat.id, `üì© –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –¥–ª—è ${state.phone}`);
  } else if (state.step === "awaiting_code") {
    const code = msg.text;
    const phone = state.phone;
    delete pendingAuth[msg.chat.id];

    bot.sendMessage(msg.chat.id, `‚è≥ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è ${phone}...`);

    exec(`node auth-manager.js ${phone} ${code}`, (error, stdout, stderr) => {
      if (error) {
        bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        return;
      }
      if (stderr) {
        bot.sendMessage(msg.chat.id, `‚ö†Ô∏è STDERR: ${stderr}`);
        return;
      }
      bot.sendMessage(msg.chat.id, `‚úÖ –ì–æ—Ç–æ–≤–æ! –ê–∫–∫–∞—É–Ω—Ç ${phone} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.`);
    });
  }
});
